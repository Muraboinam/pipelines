pipeline{
    agent any
    tools{
        nodejs 'nodejs'
    }
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
    }
    stages {
        stage('clean workspace'){
            steps{
                cleanWs()
            }
        }
        stage('Checkout from Git'){
            steps{
                git branch: 'main', url: 'https://github.com/Muraboinam/flikart-version-2.git'
            }
        }
        stage("Sonarqube Analysis "){
            steps{
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=flipkart2 \
                    -Dsonar.projectKey=squ_860421b6e672491459a4bf8ac98d7feb6ed4f9c2'''
                }
            }
        }
        stage("quality gate"){
           steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar'
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }
        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }
        stage("Docker Build & Push"){
            steps{
                script{
                   withDockerRegistry(credentialsId: 'docker', toolName: 'docker'){   
                       sh "docker build -t flipkart1:v2 ."
                       sh "docker tag flipkart1:v2 maheshmu/flipkart1:v2 "
                       sh "docker tag flipkart1:v2 maheshmu/flipkart1:latest "
                       sh "docker push maheshmu/flipkart1:v2 "
                       sh "docker push maheshmu/flipkart1:latest"
                    }
                }
            }
        }
        stage("TRIVY"){
            steps{
                sh "trivy image  maheshmu/flipkart1:v1 > trivyimage.txt" 
            }
        }
        
        
        stage('Deploy to kubernets'){
            steps{
                script{
                     
                        withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'k8s', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
                                sh 'kubectl apply -f k8s-deployment.yml'
                        
                        }   
                    
                }
            }
        }
    }
}
